openapi: 3.0.0
info:
  description: |
    The Device Provisioning API is used to provision new devices for the Bosch IoT Suite services. It simplifies
    provisioning by registering the device in all affected services with a single API call.

    Currently the Bosch IoT Hub and Bosch IoT Things service are supported.
    The following entities can be provisioned:
    * **Device** (Bosch IoT Hub): The Bosch IoT Hub has to be made aware of the Device which will connect to it and send
    telemetry data.
    * **Credentials** (Bosch IoT Hub): Credentials are required to authenticate Devices which want to connect. If
    Devices connect via a gateway, only credentials for the gateway are required. Hence, Credentials are optional in
    the Device Provisioning API.
    * **Thing** (Bosch IoT Things): A Thing is a *Digital Twin*: Among other things, it stores the state of the
    Device and provides an API for it, which is also called *Device-as-a-Service*. [Vorto models](https://vorto.eclipse.org) can be used to define
    the capabilities of a Thing.
    * **Policy** (Bosch IoT Things): Each Thing must have a reference (`policyId`) to a Policy which defines its access
     control. You can decide to create a specific Policy for each Thing or to re-use a Policy for multiple Things.

    Authentication and authorization of the Device Provisioning API is based on *Suite Auth* access tokens. You have
    to create a Suite Auth access token which provides full access to the Bosch IoT Hub and Bosch IoT
    Things service instances you want to address and provide it as *Bearer Authorization*.

    **Note**: If you are using the Asset communication package hybrid offering please use the following server:
    - https://deviceprovisioning.eu-h1.bosch-iot-suite.com/api/1
  title: Bosch IoT Suite - Device Provisioning
  version: "1"
servers:
- url: https://deviceprovisioning.eu-1.bosch-iot-suite.com/api/1
- url: https://deviceprovisioning.eu-h1.bosch-iot-suite.com/api/1
security:
- bearerAuth: []
- SuiteAuth: []
tags:
- description: Provision devices
  name: provisioning
- description: De-provisioning devices
  name: de-provisioning
paths:
  /{service-instance-id}/devices:
    post:
      parameters:
      - description: |
          The ID of the Bosch IoT Suite for Asset Communication subscription for which you want to provision a device.
          Not the IDs of the underlying Bosch IoT Hub or Bosch IoT Things service instance.
        explode: false
        in: path
        name: service-instance-id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Controls who owns the newly created Thing (i.e. which subject is used for the default entry of the created
          Policy). If this parameter is omitted the authenticated subject of the user who made the request is used
          (Things default).

          Supported scopes:
          * `subscription`: full access is granted to all users who have access to the same IoT Suite subscription
        explode: true
        in: query
        name: authScope
        required: false
        schema:
          type: string
        style: form
      - description: |
          If set to true, the resolution of the Vorto model from the definition field of the Thing will not be attempted.
        explode: true
        in: query
        name: skipVorto
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningRequestPayload'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningResponsePayload'
          description: |
            The device has been successfully provisioned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provisioning400ErrorPayload'
          description: |
            The device could not be provisioned because the request was malformed, e.g. it does not contain valid JSON.
        "401":
          description: |
            The request cannot be processed because the request does not contain valid credentials.
        "403":
          description: |
            Insufficient permissions.
        "409":
          description: |
            A device with the given ID has already been provisioned for at least one of the services or the requests
            contains provisioning information for some service which has an ID not matching the one specified in the
            field `ProvisioningRequestPayload#id`. The body may contains hints regarding the problem.
      summary: |
        Provision a device: Creates the required resources in the underlying Bosch IoT Suite services.
      tags:
      - provisioning
  /{service-instance-id}/devices/{device-id}:
    delete:
      parameters:
      - description: |
          The ID of the Bosch IoT Suite for Asset Communication subscription for which you want to de-provision a device.
          Not the IDs of the underlying Bosch IoT Hub or Bosch IoT Things service instance.
        explode: false
        in: path
        name: service-instance-id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the device you want to de-provision
        explode: false
        in: path
        name: device-id
        required: true
        schema:
          type: string
        style: simple
      - description: Pass 'true' if you wish to keep the device's credentials
        explode: true
        in: query
        name: keepCredentials
        required: false
        schema:
          type: boolean
        style: form
      - description: Pass 'true' if you wish to keep the thing's policy
        explode: true
        in: query
        name: keepPolicy
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeprovisioningResponsePayload'
          description: |
            The device has been successfully de-provisioned.
        "401":
          description: |
            The request cannot be processed because the request does not contain valid credentials.
        "403":
          description: |
            Insufficient permissions.
        "404":
          description: |
            At least one of the underlying resources could not be found.
      summary: |
        De-provisioning a device: Deletes the device, thing, policy and credentials by ID in the underlying Bosch IoT Suite
        services.
      tags:
      - de-provisioning
components:
  responses:
    unauthorized:
      description: |
        The request cannot be processed because the request does not contain valid credentials.
    forbidden:
      description: |
        Insufficient permissions.
    notFound:
      description: |
        At least one of the underlying resources could not be found.
  schemas:
    ProvisioningRequestPayload:
      description: |
        Defines the structure of a provisioning request.
      example:
        id: com.bosch.example:my-device-4711
        hub:
          device:
            enabled: true
          credentials:
            type: hashed-password
            secrets:
            - password: yourPassword
        things:
          thing:
            attributes:
              manufacturer: Robert Bosch GmbH
      properties:
        id:
          type: string
        hub:
          $ref: '#/components/schemas/HubResources'
        things:
          $ref: '#/components/schemas/ThingsResources'
      required:
      - hub
      - id
      - things
    ProvisioningResponsePayload:
      description: |
        Defines the structure of a provisioning response.
      example:
        id: com.bosch.example:my-device-4711
        hub:
          device:
            enabled: true
            deviceId: com.bosch.example:my-device-4711
          credentials:
            tenantId: tmytenant_hub
            deviceId: com.bosch.example:my-device-4711
            authId: com.bosch.example_my-device-4711
            type: hashed-password
            secrets:
            - password: yourPassword
            adapters:
            - type: http
              uri: https://http.bosch-iot-hub.com
              host: http.bosch-iot-hub.com
              port: 443
            - type: gateway-software
              uri: https://gateway-software.bosch-iot-hub.com/httptrprt
              host: gateway-software.bosch-iot-hub.com
              port: 443
            - type: mqtt
              uri: mqtts://mqtt.bosch-iot-hub.com
              host: mqtt.bosch-iot-hub.com
              port: 8883
        things:
          thing:
            attributes:
              manufacturer: Robert Bosch GmbH
      properties:
        id:
          type: string
        hub:
          $ref: '#/components/schemas/HubResponse'
        things:
          $ref: '#/components/schemas/ThingsResources'
    Provisioning400ErrorPayload:
      properties:
        description:
          description: |
            A message describing the cause.
          type: string
        errorDetails:
          description: |
            An arbitrary JSON object representing the error.
          type: object
    HubResources:
      description: |
        Data structure holding provisioning information for Bosch IoT Hub.
      properties:
        device:
          $ref: '#/components/schemas/registration-suite'
        credentials:
          $ref: '#/components/schemas/credential-suite'
      required:
      - device
    HubResponse:
      properties:
        device:
          $ref: '#/components/schemas/registration-suite'
        credentials:
          $ref: '#/components/schemas/credential-suite-response'
    ThingsResources:
      description: |
        Data structure holding provisioning information for Bosch IoT Things.
      properties:
        thing:
          description: |
            Data structure for creating a Thing in Bosch IoT Things.
            For details, see `Create a new Thing` at the [Bosch IoT Things Http API Documentation](https://apidocs.bosch-iot-suite.com/index.html?urls.primaryName=Bosch%20IoT%20Things%20-%20API%20v2).
            Note that in contrast to direct usage of the Things API, the `id` will not be generated, but will be set to
            the one specified in the request's ProvisioningRequestPayload. If set, it must match the one from the request's ProvisioningRequestPayload.
            Note that a Vorto model can be used to to define the capabilities of a Thing. To include the capabilities of a Vorto model, the fully qualified name (in the form namespace:name:version) of the model must be
            set in the 'definition' field of the Thing. The model is then retrieved from the official Eclipse Vorto repository and its capabilities are automatically added to the Thing.
            Note that each Thing requires a Policy which defines its access control. You can specify the Policy for a
            Thing in three different ways:
             * use a generated Policy (recommended): per default, the Device Provisioning Service creates a Policy for
             you (which covers standard usage scenarios)
             * use an existing Policy: specify `policyId` appropriately
             * define your own Policy: define the Policy as an Inline-Policy (field `_policy`)

            The generated Policy contains two entries:
             * `DEFAULT`: Defines access for the Provisioner (the one who provisions the device with this API). It
             provides full `READ` and `WRITE` access to the Thing, Messages and the Policy itself.
             * `DEVICE`: Defines access control for the connectivity of the device. It provides full `READ` and `WRITE`
             access to the Thing and Messages, but not to the Policy itself.

            ```
            {
              "policyId": "<<provisioningRequestPayload.id>>",
              "entries": {
                  "DEFAULT": {
                    "subjects": {
                      "{{ request:subjectId }}": { "type": "suite-auth" }
                    },
                    "resources": {
                      "thing:/":   { "grant": ["READ", "WRITE"], "revoke": [] },
                      "message:/": { "grant": ["READ", "WRITE"], "revoke": [] },
                      "policy:/":  { "grant": ["READ", "WRITE"], "revoke": [] }
                    }
                  },
                  "DEVICE": {
                    "subjects": {
                      "integration:{{ request:solutionId }}:hub": {
                        "type": "iot-things-integration"
                      }
                    },
                    "resources": {
                      "thing:/":   { "grant": ["READ", "WRITE"], "revoke": [] },
                      "message:/": { "grant": ["READ", "WRITE"], "revoke": [] }
                    }
                  }
              }
            }
            ```
          type: object
      required:
      - thing
    ThingsThing:
      description: |
        Data structure for creating a Thing in Bosch IoT Things.
        For details, see `Create a new Thing` at the [Bosch IoT Things Http API Documentation](https://apidocs.bosch-iot-suite.com/index.html?urls.primaryName=Bosch%20IoT%20Things%20-%20API%20v2).
        Note that in contrast to direct usage of the Things API, the `id` will not be generated, but will be set to
        the one specified in the request's ProvisioningRequestPayload. If set, it must match the one from the request's ProvisioningRequestPayload.
        Note that a Vorto model can be used to to define the capabilities of a Thing. To include the capabilities of a Vorto model, the fully qualified name (in the form namespace:name:version) of the model must be
        set in the 'definition' field of the Thing. The model is then retrieved from the official Eclipse Vorto repository and its capabilities are automatically added to the Thing.
        Note that each Thing requires a Policy which defines its access control. You can specify the Policy for a
        Thing in three different ways:
         * use a generated Policy (recommended): per default, the Device Provisioning Service creates a Policy for
         you (which covers standard usage scenarios)
         * use an existing Policy: specify `policyId` appropriately
         * define your own Policy: define the Policy as an Inline-Policy (field `_policy`)

        The generated Policy contains two entries:
         * `DEFAULT`: Defines access for the Provisioner (the one who provisions the device with this API). It
         provides full `READ` and `WRITE` access to the Thing, Messages and the Policy itself.
         * `DEVICE`: Defines access control for the connectivity of the device. It provides full `READ` and `WRITE`
         access to the Thing and Messages, but not to the Policy itself.

        ```
        {
          "policyId": "<<provisioningRequestPayload.id>>",
          "entries": {
              "DEFAULT": {
                "subjects": {
                  "{{ request:subjectId }}": { "type": "suite-auth" }
                },
                "resources": {
                  "thing:/":   { "grant": ["READ", "WRITE"], "revoke": [] },
                  "message:/": { "grant": ["READ", "WRITE"], "revoke": [] },
                  "policy:/":  { "grant": ["READ", "WRITE"], "revoke": [] }
                }
              },
              "DEVICE": {
                "subjects": {
                  "integration:{{ request:solutionId }}:hub": {
                    "type": "iot-things-integration"
                  }
                },
                "resources": {
                  "thing:/":   { "grant": ["READ", "WRITE"], "revoke": [] },
                  "message:/": { "grant": ["READ", "WRITE"], "revoke": [] }
                }
              }
          }
        }
        ```
      type: object
    DeprovisioningResponsePayload:
      example:
        credentials: credentials
        device: device
        thing: thing
        policy: policy
      properties:
        device:
          description: |
            A message describing the result of deleting the device resource.
          type: string
        credentials:
          description: |
            A message describing the result of deleting the credentials resource.
          type: string
        thing:
          description: |
            A message describing the result of deleting the thing resource.
          type: string
        policy:
          description: |
            A message describing the result of deleting the policy resource.
          type: string
    registration-suite:
      properties:
        deviceId:
          title: ID of device
          type: string
        enabled:
          default: true
          title: Device Enabled
          type: boolean
        via:
          description: Gateway Device that is allowed to send messages on behalf of
            the device.
          type: string
        defaults:
          $ref: '#/components/schemas/registration_suite_defaults'
      type: object
    credential-suite:
      example:
        deviceId: "4711"
        type: hashed-password
        authId: little-sensor
        enabled: true
        secrets:
        - password: plaintextPassword
      oneOf:
      - $ref: '#/components/schemas/hashedPassword'
      - $ref: '#/components/schemas/x509Cert'
      - $ref: '#/components/schemas/psk'
    hashedPassword:
      allOf:
      - $ref: '#/components/schemas/credentialsBase'
      - $ref: '#/components/schemas/hashedPassword_allOf'
    credentialsBase:
      properties:
        authId:
          description: The identity that the device should be authenticated as.
          type: string
        enabled:
          default: true
          description: If set to false the credentials are not supposed to be used
            to authenticate devices any longer. This may e.g. be used to disable a
            particular mechanism for authenticating the device.
          type: boolean
        deviceId:
          description: The ID of the device to which the credentials belong.
          type: string
      type: object
    secretHash:
      description: __DEPRECATED!__ Data structure representing a hashed secret of
        a credential. Please use plaintext secret or base64 encoded plaintext secret.
      properties:
        notBefore:
          description: The point in time from which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        notAfter:
          description: The point in time until which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        pwdHash:
          deprecated: true
          description: __DEPRECATED!__ The Base64 encoded bytes representing the hashed
            password. The password hash MUST be computed by applying the hash function
            to the byte array consisting of the salt bytes (if a salt is used) and
            the UTF-8 encoding of the clear text password.
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
          type: string
        salt:
          deprecated: true
          description: __DEPRECATED!__ The Base64 encoded bytes used as salt for the
            password hash. If not set then the password hash has been created without
            salt.
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
          type: string
        hashFunction:
          deprecated: true
          description: __DEPRECATED!__ The name of the hash function used to create
            the password hash. At the moment sha-256 and sha-512 are supported.
          enum:
          - sha-256
          - sha-512
          type: string
      required:
      - hashFunction
      - pwdHash
      type: object
    not-before:
      description: The point in time from which the secret may be used to authenticate
        devices. This is optional and can be ignored if the validity period is the
        same as the period indicated by the client certificate’s corresponding properties.
        If not null, the value MUST be an ISO 8601 compliant combined date and time
        representation.
      type: string
    not-after:
      description: The point in time until which the secret may be used to authenticate
        devices. This is optional and can be ignored if the validity period is the
        same as the period indicated by the client certificate’s corresponding properties.
        If not null, the value MUST be an ISO 8601 compliant combined date and time
        representation.
      type: string
    secretPassword:
      description: Data structure representing a plaintext secret of a credential.
      properties:
        notBefore:
          description: The point in time from which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        notAfter:
          description: The point in time until which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        password:
          description: Plaintext password. Will be salted and hashed by Bosch IoT
            Hub.
          type: string
      required:
      - password
      type: object
    secretPasswordBase64:
      description: Data structure representing a base64 encoded plaintext secret of
        a credential.
      properties:
        notBefore:
          description: The point in time from which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        notAfter:
          description: The point in time until which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        passwordBase64:
          description: Plaintext base64 encoded password. Will be salted and hashed
            by Bosch IoT Hub.
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
          type: string
      required:
      - passwordBase64
      type: object
    x509Cert:
      allOf:
      - $ref: '#/components/schemas/credentialsBase'
      - $ref: '#/components/schemas/x509Cert_allOf'
    secretCertificate:
      description: Data structure representing a certificate credential.
      properties:
        notBefore:
          description: The point in time from which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        notAfter:
          description: The point in time until which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
      type: object
    psk:
      allOf:
      - $ref: '#/components/schemas/credentialsBase'
      - $ref: '#/components/schemas/psk_allOf'
    secretPsk:
      description: Data structure representing a pre-shared key credential.
      properties:
        notBefore:
          description: The point in time from which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        notAfter:
          description: The point in time until which the secret may be used to authenticate
            devices. This is optional and can be ignored if the validity period is
            the same as the period indicated by the client certificate’s corresponding
            properties. If not null, the value MUST be an ISO 8601 compliant combined
            date and time representation.
          type: string
        key:
          description: The Base64 encoded bytes representing the shared (secret) key.
          type: string
      required:
      - key
      type: object
    credential-suite-response:
      allOf:
      - $ref: '#/components/schemas/credential-suite'
      - $ref: '#/components/schemas/credential_suite_response_allOf'
      example:
        deviceId: "4711"
        type: hashed-password
        authId: little-sensor
        enabled: true
        secrets:
        - password: plaintextPassword
        adapters:
        - type: http
          uri: https://http.bosch-iot-hub.com
          host: http.bosch-iot-hub.com
          port: 443
        - type: gateway-software
          uri: https://gateway-software.bosch-iot-hub.com/httptrprt
          host: gateway-software.bosch-iot-hub.com
          port: 443
        - type: mqtt
          uri: mqtts://mqtt.bosch-iot-hub.com
          host: mqtt.bosch-iot-hub.com
          port: 8883
    registration_suite_defaults:
      description: Default values to be used by protocol adapters for augmenting messages
        from devices with missing information like a content-type. It is up to the
        discretion of a protocol adapter if and how to use the given default values
        when processing messages published by the device. It is possible to add custom
        properties, these will be added to each message as application properties.
      properties:
        content-type:
          description: 'The content-type to use for northbound messages published
            by this device. This can be useful for protocols like MQTT where the content-type
            cannot be set directly in a message. The content-type is specified in
            RFC-2046. Example value: ''application/json'''
          type: string
        content-encoding:
          description: The content-encoding can be set optionally in addition to the
            content-type. It defines what additional content encodings have to be
            applied to the message content to receive the media-type referenced by
            the content-type. The main usage of the content-encoding is to allow compression
            without losing information about the compressed data type. The content-encoding
            is specified in section 3.5 of RFC 2616.
          type: string
        ttl:
          description: The time-to-live (in seconds) to use for events published by
            this device. This value is limited by the booked service plan's event
            storage time.
          type: integer
    hashedPassword_allOf:
      properties:
        type:
          pattern: ^hashed-password$
          type: string
        secrets:
          description: A list of secrets scoped to a particular time period. This
            array must contain at least one element - an empty array is handled as
            an error.
          items:
            oneOf:
            - $ref: '#/components/schemas/secretHash'
            - $ref: '#/components/schemas/secretPassword'
            - $ref: '#/components/schemas/secretPasswordBase64'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - secrets
      - type
    x509Cert_allOf:
      example: '{"deviceId":"a","authId":"a","type":"x509-cert","secrets":{}}'
      properties:
        type:
          pattern: ^x509-cert$
          type: string
        secrets:
          description: A list of secrets scoped to a particular time period.
          items:
            oneOf:
            - $ref: '#/components/schemas/secretCertificate'
          maxItems: 10
          minItems: 0
          type: array
      required:
      - secrets
      - type
    psk_allOf:
      properties:
        type:
          pattern: ^psk$
          type: string
        secrets:
          description: 'A list of secrets scoped to a particular time period. This
            array must contain at least one element - an empty array is handled as
            an error. Note: PSK is only supported in some protocol adapters. For details
            check the [Hub documentation](https://docs.bosch-iot-suite.com/hub/general-concepts/deviceauthentication.html)'
          items:
            oneOf:
            - $ref: '#/components/schemas/secretPsk'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - secrets
      - type
    credential_suite_response_allOf_adapters:
      properties:
        type:
          description: The protocol adapter type, e.g. http or mqtt
          type: string
        uri:
          description: The URI of the protocol adapter in the form of `scheme://host[:port]`
          type: string
        host:
          description: The host of the protocol adapter
          type: string
        port:
          description: The port of the protocol adapter
          maximum: 65535
          minimum: 0
          type: integer
    credential_suite_response_allOf:
      properties:
        adapters:
          description: A list of protocol adapters that can be used with these credentials
          items:
            $ref: '#/components/schemas/credential_suite_response_allOf_adapters'
          type: array
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: A JSON Web Token issued by Suite Auth.
      scheme: bearer
      type: http
    SuiteAuth:
      description: Use OAuth2 clients from https://accounts.bosch-iot-suite.com/oauth2-clients/
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://access.bosch-iot-suit.com/v2/token
      type: oauth2
      x-tokenName: id_token
