/*
 * Bosch IoT Suite - Device Provisioning
 *
 * The Device Provisioning API is used to provision new devices for the Bosch IoT Suite services. It simplifies provisioning by registering the device in all affected services with a single API call.  Currently the Bosch IoT Hub and Bosch IoT Things service are supported. The following entities can be provisioned: * **Device** (Bosch IoT Hub): The Bosch IoT Hub has to be made aware of the Device which will connect to it and send telemetry data. * **Credentials** (Bosch IoT Hub): Credentials are required to authenticate Devices which want to connect. If Devices connect via a gateway, only credentials for the gateway are required. Hence, Credentials are optional in the Device Provisioning API. * **Thing** (Bosch IoT Things): A Thing is a *Digital Twin*: Among other things, it stores the state of the Device and provides an API for it, which is also called *Device-as-a-Service*. [Vorto models](https://vorto.eclipse.org) can be used to define the capabilities of a Thing. * **Policy** (Bosch IoT Things): Each Thing must have a reference (`policyId`) to a Policy which defines its access  control. You can decide to create a specific Policy for each Thing or to re-use a Policy for multiple Things.  Authentication and authorization of the Device Provisioning API is based on *Suite Auth* access tokens. You have to create a Suite Auth access token which provides full access to the Bosch IoT Hub and Bosch IoT Things service instances you want to address and provide it as *Bearer Authorization*.  **Note**: If you are using the Asset communication package hybrid offering please use the following server: - https://deviceprovisioning.eu-h1.bosch-iot-suite.com/api/1 
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package iotdevprov
// RegistrationSuiteDefaults Default values to be used by protocol adapters for augmenting messages from devices with missing information like a content-type. It is up to the discretion of a protocol adapter if and how to use the given default values when processing messages published by the device. It is possible to add custom properties, these will be added to each message as application properties.
type RegistrationSuiteDefaults struct {
	// The content-type to use for northbound messages published by this device. This can be useful for protocols like MQTT where the content-type cannot be set directly in a message. The content-type is specified in RFC-2046. Example value: 'application/json'
	ContentType string `json:"content-type,omitempty"`
	// The content-encoding can be set optionally in addition to the content-type. It defines what additional content encodings have to be applied to the message content to receive the media-type referenced by the content-type. The main usage of the content-encoding is to allow compression without losing information about the compressed data type. The content-encoding is specified in section 3.5 of RFC 2616.
	ContentEncoding string `json:"content-encoding,omitempty"`
	// The time-to-live (in seconds) to use for events published by this device. This value is limited by the booked service plan's event storage time.
	Ttl int32 `json:"ttl,omitempty"`
}
